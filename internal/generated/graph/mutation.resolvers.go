package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"errors"
	"log/slog"

	"github.com/google/uuid"
	"github.com/rikeda71/go-gql-sqlc-template/internal/generated/db"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input CreateUserInput) (*CreateUserOutput, error) {
	id, err := uuid.NewV7()
	if err != nil {
		msg := errors.Join(err, errors.New("failed to create user id")).Error()
		slog.Error(msg, "email", input.Email, "name", input.Name)
		return &CreateUserOutput{Status: MutationStatusFailure, ErrorMessage: &msg}, nil
	}
	result, err := r.DBClient.InsertUser(ctx, db.InsertUserParams{ID: id.String(), UserName: input.Name, Email: input.Email})
	if err != nil {
		msg := errors.Join(err, errors.New("failed to insert user")).Error()
		slog.Error(msg, "email", input.Email, "name", input.Name)
		return &CreateUserOutput{Status: MutationStatusFailure, ErrorMessage: &msg}, nil
	}
	return &CreateUserOutput{
		Status: MutationStatusSuccess,
		Metadata: &CreateUserOutputMetadata{
			User: &User{
				ID:    result.ID,
				Name:  result.UserName,
				Email: result.Email,
			},
		},
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
